---
- name: Enable DNS resolution
  tags:
    - dns
  hosts: all
  tasks:
    - file:
        path: "/etc/systemd/resolved.conf.d"
        state: directory
    - copy:
        dest: /etc/systemd/resolved.conf.d/kttw.conf
        content: |
          [Resolve]
          Domains=kttw.internal
    - systemd:
        name: "systemd-resolved"
        daemon_reload: yes
        state: restarted

- name: Controller Certificates
  tags:
    - controllers
    - controllers-certs
  hosts: controllers
  tasks:
    - name: Copy Certs
      copy:
        src: ../certificates/{{ item }}
        dest: ~/{{ item }}
      with_items:
        - ca.pem
        - ca-key.pem
        - kubernetes-key.pem
        - kubernetes.pem
        - service-account-key.pem
        - service-account.pem

- name: Worker Certificates
  tags:
    - workers
    - workers-certs
  hosts: workers
  tasks:
    - name: Copy Certs
      copy:
        src: ../certificates/{{ item }}
        dest: ~/{{ item }}
      with_items:
        - ca.pem
        - "{{ inventory_hostname }}.pem"
        - "{{ inventory_hostname }}-key.pem"
    - name: Copy kubeconfig
      copy:
        src: ../kubeconfig/{{ item }}
        dest: ~/{{ item }}
      with_items:
        - kube-proxy.kubeconfig
        - "{{ inventory_hostname }}.kubeconfig"

- name: Controllers Init
  tags:
    - controllers
    - controllers-init
  hosts: controllers
  tasks:
    - name: Copy kubeconfig
      copy:
        src: ../kubeconfig/{{ item }}
        dest: ~/{{ item }}
      with_items:
        - admin.kubeconfig
        - kube-controller-manager.kubeconfig
        - kube-scheduler.kubeconfig
    # etcd
    - name: Get etcd
      unarchive:
        src: https://github.com/etcd-io/etcd/releases/download/v3.4.0/etcd-v3.4.0-linux-amd64.tar.gz
        dest: /usr/local/bin/
        remote_src: true
        extra_opts:
          - --strip=1
        exclude:
          - README*
          - Documentation
    - name: Create etcd dirs
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/etcd
        - /var/lib/etcd
    - name: Copy etcd config
      copy:
        src: ../certificates/{{ item }}
        dest: /etc/etcd/{{ item }}
      with_items:
        - ca.pem
        - kubernetes-key.pem
        - kubernetes.pem
    - name: Create etcd service
      vars:
        ETCD_NAME: "{{ inventory_hostname }}"
        INTERNAL_IP: "{{ ansible_default_ipv4.address }}"
      template:
        src: templates/etcd.service.j2
        dest: /etc/systemd/system/etcd.service
    - name: Start and Enable etcd
      systemd:
        name: etcd
        enabled: yes
        state: restarted
        daemon_reload: yes
    # kubernetes
    - name: Create kubernetes dirs
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/kubernetes/config
        - /var/lib/kubernetes/
    - name: Download kubernetes binaries
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        mode: "0755"
      with_items:
        - dest: /usr/local/bin/kube-apiserver
          url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kube-apiserver"
        - dest: /usr/local/bin/kube-controller-manager
          url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kube-controller-manager"
        - dest: /usr/local/bin/kube-scheduler
          url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kube-scheduler"
        - dest: /usr/local/bin/kubectl
          url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kubectl"
    # kube-apiserver
    - name: Copy kube-apiserver config
      copy:
        src: "../certificates/{{ item }}"
        dest: /var/lib/kubernetes/{{ item }}
      with_items:
        - ca.pem
        - ca-key.pem
        - kubernetes-key.pem
        - kubernetes.pem
        - service-account-key.pem
        - service-account.pem
    - name: Encryption Config kube-apiserver
      copy:
        dest: /var/lib/kubernetes/encryption-config.yaml
        content: |
          kind: EncryptionConfig
          apiVersion: v1
          resources:
            - resources:
                - secrets
              providers:
                - aescbc:
                    keys:
                      - name: key1
                        secret: xJ+zuuX8JByMhPdb630myE646NeBGQKaNlrG1pzs5ec= # TODO: Change or generate
                - identity: {}
    - name: Create kube-apiserver service
      vars:
        INTERNAL_IP: "{{ ansible_default_ipv4.address }}"
      template:
        src: templates/kube-apiserver.service.j2
        dest: /etc/systemd/system/kube-apiserver.service
    # kube-controller-manager
    - name: Copy kube-controller-manager
      copy:
        src: ../kubeconfig/{{ item }}
        dest: /var/lib/kubernetes/{{ item }}
      with_items:
        - kube-controller-manager.kubeconfig
    - name: Create kube-controller-manager service
      template:
        src: templates/kube-controller-manager.service.j2
        dest: /etc/systemd/system/kube-controller-manager.service
    # kube-scheduler
    - name: Copy kube-scheduler
      copy:
        src: ../kubeconfig/{{ item }}
        dest: /var/lib/kubernetes/{{ item }}
      with_items:
        - kube-scheduler.kubeconfig
    - name: Configure kube-scheduler
      copy:
        dest: /etc/kubernetes/config/kube-scheduler.yaml
        content: |
          apiVersion: kubescheduler.config.k8s.io/v1alpha1
          kind: KubeSchedulerConfiguration
          clientConnection:
            kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
          leaderElection:
            leaderElect: true
    - name: Create kube-scheduler service
      template:
        src: templates/kube-scheduler.service.j2
        dest: /etc/systemd/system/kube-scheduler.service
    # Start all
    - name: Start and Enable kube services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: restarted
        daemon_reload: yes
      with_items:
        - kube-apiserver
        - kube-controller-manager
        - kube-scheduler
    # Proxy healthz
    - name: Install NGINX
      apt:
        name: nginx
        state: latest
    - name: Configure nginx healthz proxy
      copy:
        src: files/kubernetes.default.svc.cluster.local
        dest: /etc/nginx/sites-enabled/kubernetes.default.svc.cluster.local
    - name: Start NGINX
      systemd:
        name: nginx
        enabled: yes
        state: restarted

- name: Kubectl with ctrl-0
  tags:
    - controllers
    - kubectl
  hosts: ctrl-0
  tasks:
    - name: Create RBAC apiserver to kubelet role
      copy:
        dest: /tmp/kube-apiserver-to-kubelet.yml
        content: |
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRole
          metadata:
            annotations:
              rbac.authorization.kubernetes.io/autoupdate: "true"
            labels:
              kubernetes.io/bootstrapping: rbac-defaults
            name: system:kube-apiserver-to-kubelet
          rules:
            - apiGroups:
                - ""
              resources:
                - nodes/proxy
                - nodes/stats
                - nodes/log
                - nodes/spec
                - nodes/metrics
              verbs:
                - "*"
    - command: kubectl apply --kubeconfig /root/admin.kubeconfig -f /tmp/kube-apiserver-to-kubelet.yml

    - name: Bind role to kubernetes user
      copy:
        dest: /tmp/kube-apiserver.yml
        content: |
          apiVersion: rbac.authorization.k8s.io/v1beta1
          kind: ClusterRoleBinding
          metadata:
            name: system:kube-apiserver
            namespace: ""
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: system:kube-apiserver-to-kubelet
          subjects:
            - apiGroup: rbac.authorization.k8s.io
              kind: User
              name: kubernetes
    - command: kubectl apply --kubeconfig /root/admin.kubeconfig -f /tmp/kube-apiserver.yml

- name: Workers Bootrstrap
  tags:
    - workers
    - workers-init
  hosts: workers
  tasks:
    - name: Install deps
      apt:
        name: "{{ packages }}"
      vars:
        packages:
          - socat
          - conntrack
          - ipset
    - name: Download kubernetes worker binaries
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        mode: "0755"
      with_items:
        - dest: /usr/local/bin/kube-proxy
          url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kube-proxy"
        - dest: /usr/local/bin/kubelet
          url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kubelet"
        - dest: /usr/local/bin/kubectl
          url: "https://storage.googleapis.com/kubernetes-release/release/v1.15.3/bin/linux/amd64/kubectl"
        - dest: /usr/local/bin/runc
          url: "https://github.com/opencontainers/runc/releases/download/v1.0.0-rc8/runc.amd64"
    - name: Create kubernetes dirs
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/cni/net.d
        - /opt/cni/bin
        - /var/lib/kubelet
        - /var/lib/kube-proxy
        - /var/lib/kubernetes
        - /var/run/kubernetes
    - name: Download cni and containerd
      unarchive:
        src: "{{ item.url }}"
        dest: "{{ item.dest }}"
        mode: "0755"
        remote_src: true
        extra_opts:
          - --strip=1
      with_items:
        - dest: /usr/local/bin/
          url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.15.0/crictl-v1.15.0-linux-amd64.tar.gz
        - dest: /opt/cni/bin/
          url: https://github.com/containernetworking/plugins/releases/download/v0.8.2/cni-plugins-linux-amd64-v0.8.2.tgz
        - dest: /bin/
          url: https://github.com/containerd/containerd/releases/download/v1.2.9/containerd-1.2.9.linux-amd64.tar.gz
    - name: Download crictl
      unarchive:
        src: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.15.0/crictl-v1.15.0-linux-amd64.tar.gz
        dest: /usr/local/bin/
        mode: "0755"
        remote_src: true

- name: Workers Configure CNI Networking
  tags:
    - workers
    - cni
  hosts: workers
  tasks:
    - name: Create the bridge network configuration file
      copy:
        dest: /etc/cni/net.d/10-bridge.conf
        content: |
          {
              "cniVersion": "0.3.1",
              "name": "bridge",
              "type": "bridge",
              "bridge": "cnio0",
              "isGateway": true,
              "ipMasq": true,
              "ipam": {
                  "type": "host-local",
                  "ranges": [
                    [{"subnet": "{{ pod_cidr }}"}]
                  ],
                  "routes": [{"dst": "0.0.0.0/0"}]
              }
          }
    - name: Create the loopback network configuration file
      copy:
        dest: /etc/cni/net.d/99-loopback.conf
        content: |
          {
              "cniVersion": "0.3.1",
              "name": "lo",
              "type": "loopback"
          }
    - name: Create the containerd configuration dir
      file:
        path: "/etc/containerd/"
        state: directory
    - name: Create the containerd configuration file
      copy:
        dest: /etc/containerd/config.toml
        content: |
          [plugins]
            [plugins.cri.containerd]
              snapshotter = "overlayfs"
              [plugins.cri.containerd.default_runtime]
                runtime_type = "io.containerd.runtime.v1.linux"
                runtime_engine = "/usr/local/bin/runc"
                runtime_root = ""
    - name: Configure containerd
      copy:
        src: files/containerd.service
        dest: /etc/systemd/system/containerd.service

- name: Configure the Kubelet
  tags:
    - workers
    - kubelet
  hosts: workers
  tasks:
    - name: Copy kubelet certs and kubeconfig
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: ../certificates/{{ inventory_hostname }}-key.pem
          dest: /var/lib/kubelet/{{ inventory_hostname }}-key.pem
        - src: ../certificates/{{ inventory_hostname }}.pem
          dest: /var/lib/kubelet/{{ inventory_hostname }}.pem
        - src: ../certificates/ca.pem
          dest: /var/lib/kubernetes/ca.pem
        - src: ../kubeconfig/{{ inventory_hostname }}.kubeconfig
          dest: /var/lib/kubelet/kubeconfig

    - name: Create the kubelet-config.yaml configuration file
      copy:
        dest: /var/lib/kubelet/kubelet-config.yaml
        content: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "/var/lib/kubernetes/ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "cluster.local"
          clusterDNS:
            - "10.32.0.10"
          podCIDR: "{{ pod_cidr }}"
          resolvConf: "/run/systemd/resolve/resolv.conf"
          runtimeRequestTimeout: "15m"
          tlsCertFile: "/var/lib/kubelet/{{ inventory_hostname }}.pem"
          tlsPrivateKeyFile: "/var/lib/kubelet/{{ inventory_hostname }}-key.pem"
    - name: Create the kubelet.service systemd unit file
      vars:
        HOSTNAME: "{{ inventory_hostname }}"
      template:
        src: templates/kubelet.service.j2
        dest: /etc/systemd/system/kubelet.service

- name: Configure the Kubernetes Proxy
  tags:
    - workers
    - kube-proxy
  hosts: workers
  tasks:
    - copy:
        src: ../kubeconfig/kube-proxy.kubeconfig
        dest: /var/lib/kube-proxy/kubeconfig
    - name: Create the kube-proxy-config.yaml configuration file
      copy:
        dest: /var/lib/kube-proxy/kube-proxy-config.yaml
        content: |
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          clientConnection:
            kubeconfig: "/var/lib/kube-proxy/kubeconfig"
          mode: "iptables"
          clusterCIDR: "10.200.0.0/16"
    - name: Create the kube-proxy.service systemd unit file
      copy:
        src: files/kube-proxy.service
        dest: /etc/systemd/system/kube-proxy.service

- name: Start the Worker Services
  tags:
    - workers
    - workers-start-services
  hosts: workers
  tasks:
    - systemd:
        name: "{{ item }}"
        enabled: yes
        state: restarted
        daemon_reload: yes
      with_items:
        - containerd
        - kubelet
        - kube-proxy
